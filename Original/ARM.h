//---------------------------------------------------------------------------

#ifndef ARMH
#define ARMH
//---------------------------------------------------------------------------
#include <Classes.hpp>
#include <Controls.hpp>
#include <StdCtrls.hpp>
#include <Forms.hpp>
#include <ExtCtrls.hpp>
#include <Menus.hpp>
#include <Dialogs.hpp>
#include <Chart.hpp>
#include <Series.hpp>
#include <TeEngine.hpp>
#include <TeeProcs.hpp>
#include <Mask.hpp>
#include "visa.h"
#include "vector.h"
#include <Grids.hpp>
#include <ComCtrls.hpp>
#include "CSPIN.h"
#include <Buttons.hpp>
#include "TFmLib.h"
#include "TFmWriteUps.h"
#include "Ftd2xx.h"
#include "smsd_com.h"
#include "smsd_pov.h"
#include <RzRadChk.hpp>
#include "RzBorder.hpp"
#include <string>
#include <fstream>
#include <math.hpp> 
#include "DateUtils.hpp"


#include <AppEvnts.hpp>
#include "Frame.h"
#include "RzBorder.hpp"


#define Fl 4000     //5000
#define Fh 18000
#define Fb 8000
#define MAX_TMO 3000

#define TIME_READ     1    // FT_SetTimeouts
#define TIME_WRITE    30   // FT_SetTimeouts
#define TIME_WAIT     1    // FT_SetLatencyTimer (1-255)
#define MAX_DEV_COUNT 2
#define ONE_DEG 218 //для 100
#define OfSetSec 12
#define INIT_VAL 99999
#define AT256_ROM_SIZE 32768
#define DA_PPA52L_UPPU 6
#define DA_PPA52P_UPPU 7


//---------------------------------------------------------------------------
class CFtDevice{
private:
   FT_STATUS ftStatus;
   FT_HANDLE fthnd;
public:
   CFtDevice(){fthnd = NULL;}
   //~CFtDevice(){ if (fthnd) Stop();}
    ~CFtDevice(){ if (fthnd) FT_Close(fthnd); fthnd = NULL;}
   int Start(char *descr);
   //void Stop();
   int ResetP(void);
   int Write(char *buf, int size);
   int Read(char *buf, int size, int *sz_readed);
   int GetStatus(int *rx_bytes, int *tx_bytes);
   DWORD Get_FtStatus(void);
   int WtProgr(void);
   };

/*class SmsdCom{
private:
   HANDLE hCom;
public:
   SmsdCom(){hCom = NULL;}
   ~SmsdCom(){if (hCom != NULL) CloseCom();}
   bool OpenCom(char *com_num);
   bool CloseCom();
   DWORD WriteCom(char* buf, int len);
   DWORD WriteComChar(char b);
   int ReadCom(char *buf, int len);
   char ReadComChar();
};*/

class TForm1 : public TForm
{
__published:	// IDE-managed Components
        TMainMenu *MainMenu1;
        TMenuItem *N1;
        TMenuItem *N2;
        TMenuItem *N3;
        TMenuItem *N4;
  TMenuItem *N31;
  TMenuItem *N12;
  TMenuItem *N22;
  TMenuItem *N33;
  TPanel *PanelPotent;
  TRadioGroup *RadioGroup1;
  TRadioGroup *RadioGroup3;
  TComboBox *ComboBox3;
  TLabel *Label11;
  TMenuItem *N15;
  TLabel *Label24;
  TSpeedButton *SpeedButton1;
  TSpeedButton *SpeedButton2;
  TButton *Button17;
  TPanel *P_1;
  TLabel *Label39;
  TLabel *L_max_p;
  TLabel *L_pmax_no;
  TButton *Bt_Z;
  TGroupBox *GB_2;
  TLabel *L_2_L;
  TLabel *L_2_f;
  TLabel *L_2_p;
  TEdit *E_2_L;
  TUpDown *UD_2;
  TComboBox *CB_3_vh;
  TButton *B2_pusk;
  TButton *B2_stop;
  TEdit *E2_f;
  TEdit *E2_p;
  TUpDown *UD2_f;
  TGroupBox *GB_53;
  TLabel *L_53_L;
  TLabel *L_att_53_1;
  TLabel *L_att_53_2;
  TLabel *L_53_f;
  TLabel *L_53_p;
  TEdit *E_53_L;
  TUpDown *UD_53;
  TComboBox *CB_53_vh;
  TComboBox *CB_53_att_vh;
  TComboBox *CB_53_att_vyh;
  TButton *B53_pusk;
  TButton *B53_stop;
  TEdit *E53_f;
  TEdit *E53_p;
  TUpDown *UD53_f;
  TChart *Chart_kvk;
  TLineSeries *LineSeries3;
  TEdit *E_pmax;
  TButton *Button18;
  TStringGrid *StringGrid6;
  TMenuItem *N5;
  TMenuItem *N521;
  TMenuItem *N16;
  TTimer *Timer1;
  TMenuItem *N6;
  TMenuItem *N7;
  TComboBox *CB_10_vyh;
  TComboBox *CB10_att_vyh;
  TLabel *L_att_vyh;
  TLabel *L_t2_0;
  TEdit *E_t2_0;
  TLabel *L_t2_1;
  TEdit *E_t2_1;
  TEdit *E_2_um;
  TLabel *L_2_um;
  TLabel *L_3_izm_m;
  TEdit *E2_izm_m;
  TLabel *L2_att_vh;
  TComboBox *CB10_att_vh;
  TButton *B2_avt;
  TLabel *L_max_ka;
  TEdit *E_max_ka;
  TButton *B2_tabl;
  TPanel *P_6;
  TButton *B2_vyh;
  TStringGrid *SG_9;
  TLabel *L2_1;
  TLabel *L2_2;
  TLabel *L2_3;
  TLabel *L2_4;
  TLabel *L_p1;
  TLabel *L_p2;
  TLabel *L_p3;
  TLabel *L_p4;
  TLabel *L_fr;
  TButton *B2_st;
  TLineSeries *LineSeries6;
  TLabel *L_pmax_no1;
  TLabel *L_mx;
  TLabel *L_kd;
  TEdit *E_pmx_1;
  TEdit *E_kd_1;
  TGroupBox *GB_1_mrt;
  TButton *B_22_zap;
  TEdit *E_f;
  TEdit *E_fd;
  TButton *B2_mrt;
  TEdit *E_mrt;
  TMenuItem *N17;
  TPanel *PanelOUTPow;
  TStringGrid *StringGrid9;
  TLabel *Label33;
  TComboBox *ComboBox10;
  TComboBox *ComboBox11;
  TRadioGroup *RadioGroup7;
  TRadioGroup *RadioGroup8;
  TLabel *Label35;
  TLabel *Label36;
  TLabel *Label37;
  TButton *Button22;
  TButton *Button23;
  TButton *Button24;
  TMaskEdit *MaskEdit3;
  TPanel *Panel6;
  TLabel *Label8;
  TSpeedButton *SpeedButton3;
  TLabel *Label5;
  TLabel *Label9;
  TButton *Button4;
  TMaskEdit *MaskEdit2;
  TLabel *Label18;
  TSpeedButton *SB4;
        TRadioGroup *RG9;
        TPanel *P7;
        TLabel *L20;
        TButton *B25;
        TStringGrid *SG2;
        TSpeedButton *SB_5;
  TLabel *L2_gr;
  TLabel *L_d_m;
  TLabel *L_dm_mx;
  TEdit *E_km_s;
  TEdit *E_km_mx;
  TLabel *L_kd_va;
  TEdit *E_kdm_1;
  TLabel *L_km_2;
  TEdit *E_dm_2;
  TRadioGroup *RG10;
  TEdit *E_ks_1;
  TLabel *L_ks_53;
  TSpeedButton *SB_fi;
  TRadioGroup *RadioGroup9;
  TPanel *P_fi;
  TLabel *L_fi;
  TLabel *L20_fi;
  TLabel *L_3_fi;
  TButton *B_fi;
  TStringGrid *SG_fi;
  TSpeedButton *SB_fz;
  TButton *B_16;
  TEdit *E_1;
  TLabel *Label20;
  TEdit *E1_rd;
  TButton *Button16;
  TButton *Button25;
  TEdit *E1_zp_fl;
  TLabel *Label21;
  TEdit *Ed_adr;
  TMenuItem *N121;
  TMenuItem *N2531;
  TMenuItem *N32;
  TPanel *Panel_53;
  TButton *B26_close;
  TComboBox *CB_53_vyh;
  TLabel *L_t53_0;
  TLabel *L_t53_1;
  TEdit *E_t53_0;
  TEdit *E_t53_1;
  TLabel *L_53_um;
  TLabel *L_53_izm_m;
  TEdit *E_53_um;
  TEdit *E_53_izm_m;
  TLabel *Label22;
  TEdit *E_ks_53;
  TLabel *Label23;
  TChart *Chart3;
  TLabel *Label40;
  TLineSeries *LineSeries1;
  TLineSeries *LineSeries8;
  TLabel *Label41;
  TEdit *Ep53_max;
  TLabel *Label42;
  TEdit *E53_pmx_1;
  TLabel *Label43;
  TLabel *Label44;
  TLabel *Label45;
  TEdit *E53_km_s;
  TEdit *E53_dm_2;
  TEdit *E53_km_mx;
  TLabel *Label46;
  TLabel *Label47;
  TLabel *Label48;
  TEdit *E53_max_ka;
  TEdit *E53_kd_1;
  TEdit *E53_kdm_1;
  TLabel *L53_pmax_no;
  TButton *B53_avt;
  TGroupBox *GroupBox1;
  TButton *B53_tabl;
  TEdit *E53_fd;
  TRadioGroup *RG53_10;
  TRadioGroup *RG_53_11;
  TPanel *P_7;
  TLabel *Label49;
  TLabel *Label51;
  TLabel *Label52;
  TButton *B53_st;
  TButton *B53_vyh;
  TLabel *Label50;
  TLabel *Label53;
  TStringGrid *SG_53;
  TLabel *Label54;
  TSpeedButton *SpeedButton4;
  TPanel *P53_fi;
  TLabel *Label55;
  TButton *B53_fi;
  TStringGrid *SG53_fi;
  TLabel *Label56;
  TLabel *Label57;
  TLabel *Label58;
  TLabel *Label59;
  TSpeedButton *SpeedButton5;
  TEdit *E53_mrt;
  TButton *B53_mrt;
  TSpeedButton *SpeedButton6;
  TPanel *Panel7;
  TLabel *Label60;
  TButton *Button26;
  TStringGrid *SG53_mrt;
  TSpeedButton *SpeedButton7;
  TButton *Button27;
  TPanel *Panel8;
  TLabel *Label61;
  TButton *Button28;
  TButton *Button29;
  TCheckBox *CheckBox1;
  TCheckBox *CheckBox2;
  TCheckBox *CheckBox3;
  TCheckBox *CheckBox4;
  TCheckBox *CheckBox5;
  TCheckBox *CheckBox6;
  TCheckBox *CheckBox7;
  TCheckBox *CheckBox8;
  TPanel *Panel1;
  TLabel *Label1;
  TLabel *Label2;
  TLabel *Label3;
  TLabel *Label4;
  TSpeedButton *SpeedButton8;
  TSpeedButton *SpeedButton9;
  TChart *Chart1;
  TLineSeries *Series1;
  TLineSeries *Series2;
  TPointSeries *Series5;
  TButton *Button8;
  TButton *Button2;
  TButton *Button1;
  TButton *Button3;
  TButton *Button15;
  TButton *Button14;
  TRadioGroup *RadioGroup4;
  TStaticText *StaticText1;
  TComboBox *ComboBox4;
  TRadioGroup *RadioGroup10;
  TTrackBar *TrackBar2;
  TMenuItem *N4521;
  TPanel *Panel10;
  TLabel *Label62;
  TButton *Button30;
  TComboBox *ComboBox12;
  TComboBox *ComboBox13;
  TButton *Button31;
  TButton *Button32;
  TButton *Button33;
  TButton *Button34;
  TLabel *Label63;
  TLabel *Label64;
  TLabel *Label65;
  TEdit *Edit1;
  TEdit *Edit2;
  TEdit *Edit3;
  TLabel *Label66;
  TEdit *Edit4;
  TLabel *Label67;
  TEdit *Edit5;
  TLabel *Label68;
  TEdit *Edit6;
  TLabel *Label69;
  TEdit *Edit7;
  TButton *Button35;
  TPointSeries *LineSeries2;
  TPointSeries *LineSeries7;
  TButton *Button36;
  TButton *Button37;
  TPanel *Panel9;
  TButton *Button38;
  TButton *Button39;
  TButton *Button40;
  TStringGrid *StringGrid2;
  TLabel *Label70;
  TLabel *Label71;
  TLabel *Label72;
  TLabel *Label73;
  TLabel *Label74;
  TLabel *Label75;
  TLabel *Label76;
  TLabel *Label77;
  TLabel *Label78;
  TLabel *Label79;
  TLabel *Label80;
  TLabel *Label81;
  TLabel *Label82;
  TLabel *Label83;
  TLabel *Label84;
  TCheckBox *CheckBox9;
  TCheckBox *CheckBox10;
  TCheckBox *CheckBox11;
  TCheckBox *CheckBox12;
  TCheckBox *CheckBox13;
  TCheckBox *CheckBox14;
  TCheckBox *CheckBox15;
  TCheckBox *CheckBox16;
  TCheckBox *CheckBox17;
  TCheckBox *CheckBox18;
  TCheckBox *CheckBox19;
  TCheckBox *CheckBox20;
  TChart *Chart4;
  TLabel *Label85;
  TLineSeries *LineSeries9;
  TPointSeries *PointSeries1;
  TPointSeries *PointSeries2;
  TLineSeries *LineSeries10;
  TLabel *Label86;
  TEdit *Edit8;
  TLabel *Label87;
  TEdit *Edit9;
  TLabel *Label88;
  TEdit *Edit10;
  TTrackBar *TrackBar3;
  TTrackBar *TrackBar5;
  TLabel *Label89;
  TEdit *Edit11;
  TLabel *Label90;
  TEdit *Edit12;
  TLabel *Label91;
  TComboBox *ComboBox14;
  TButton *Button41;
  TLabel *Label92;
  TLabel *Label94;
  TLabel *Label95;
  TEdit *Edit13;
  TLabel *Label93;
  TEdit *Edit14;
  TEdit *Edit15;
  TEdit *Edit16;
  TLabel *Label96;
  TEdit *Edit17;
  TLabel *Label97;
  TEdit *Edit18;
  TLabel *Label98;
  TEdit *Edit19;
  TButton *Button42;
  TButton *Button43;
  TTrackBar *TrackBar4;
  TPointSeries *LineSeries5;
  TPointSeries *LineSeries4;
  TButton *Button44;
  TPanel *Panel11;
  TLabel *Label99;
  TButton *Button47;
  TButton *Button46;
  TButton *Button45;
  TStringGrid *StringGrid3;
  TLabel *Label100;
  TLabel *Label101;
  TLabel *Label102;
  TLabel *Label103;
  TLabel *Label104;
  TLabel *Label105;
  TLabel *Label106;
  TLabel *Label107;
  TLabel *Label108;
  TLabel *Label109;
  TLabel *Label110;
  TLabel *Label111;
  TLabel *Label112;
  TLabel *Label113;
  TCheckBox *CheckBox21;
  TCheckBox *CheckBox22;
  TCheckBox *CheckBox23;
  TCheckBox *CheckBox24;
  TCheckBox *CheckBox25;
  TCheckBox *CheckBox26;
  TCheckBox *CheckBox27;
  TCheckBox *CheckBox28;
  TCheckBox *CheckBox29;
  TCheckBox *CheckBox30;
  TCheckBox *CheckBox31;
  TCheckBox *CheckBox32;
  TCheckBox *CheckBox33;
  TPanel *Panel2;
  TLabel *Label29;
  TLabel *Label32;
  TStringGrid *StringGrid8;
  TButton *Button19;
  TButton *Button20;
  TButton *Button21;
  TProgressBar *ProgressBar2;
  TCheckBox *CheckBox34;
  TCheckBox *CheckBox35;
  TCheckBox *CheckBox36;
  TCheckBox *CheckBox37;
  TCheckBox *CheckBox38;
  TCheckBox *CheckBox39;
  TCheckBox *CheckBox40;
  TCheckBox *CheckBox41;
  TCheckBox *CheckBox42;
  TCheckBox *CheckBox43;
  TCheckBox *CheckBox44;
  TEdit *Edit20;
  TCheckBox *CheckBox45;
  TCheckBox *CheckBox46;
  TCheckBox *CheckBox47;
  TCheckBox *CheckBox48;
  TCheckBox *CheckBox49;
  TCheckBox *CheckBox50;
  TCheckBox *CheckBox51;
  TCheckBox *CheckBox52;
  TButton *Button48;
  TButton *Button49;
  TGroupBox *GroupBox2;
  TGroupBox *GroupBox3;
  TGroupBox *GroupBox4;
  TGroupBox *GroupBox5;
  TGroupBox *GroupBox6;
  TGroupBox *GroupBox7;
  TGroupBox *GroupBox8;
  TGroupBox *GroupBox9;
  TLabel *L_zagol;
   TRadioGroup *RadioGroup2;
   TMenuItem *N8;
   TMenuItem *N1521;
   TMenuItem *N522;
   TMenuItem *N531;
   TMenuItem *N9;
   TMenuItem *N10;
   TMenuItem *N11;
   TMenuItem *N13;
   TMenuItem *N14;
   TMenuItem *N18;
   TPanel *Panel3;
   TLabel *Label6;
   TButton *Button6;
   TGroupBox *GroupBox40;
   TRadioButton *RadioButton44;
   TRadioButton *RadioButton45;
   TButton *Button129;
   TButton *Button130;
   TButton *Button131;
   TButton *Button136;
   TChart *Chart2;
   TLineSeries *Series0;
   TLineSeries *LineSeries11;
   TLabel *Label7;
   TEdit *Edit21;
   TLabel *Label10;
   TLabel *Label12;
   TLabel *Label13;
   TButton *Button7;
   TOpenDialog *OpenDialog1;
   TPanel *Panel4;
   TGroupBox *GroupBox44;
   TLabel *Label159;
   TLabel *Label160;
   TLabel *Label161;
   TGroupBox *GroupBox36;
   TRadioButton *RadioButton46;
   TRadioButton *RadioButton47;
   TButton *Button117;

   TButton *Button119;
   TCSpinEdit *CSpinEdit26;
   TEdit *Edit59;
   TEdit *Edit60;
   TLabel *Label14;
   TGroupBox *GroupBox41;
   TLabel *Label162;
   TLabel *Label164;
   TLabel *Label165;
   TLabel *Label166;
   TLabel *Label167;
   TButton *Button120;
   TButton *Button121;
   TCSpinEdit *CSpinEdit27;
   TCSpinEdit *CSpinEdit28;
   TEdit *Edit61;
   TEdit *Edit62;
   TEdit *Edit63;
   TChart *Chart12;
   TButton *Button132;
   TComboBox *ComboBox1;
   TCSpinEdit *CSpinEdit1;
   TLabel *Label15;
   TPanel *Panel5;
   TLabel *Label17;
   TButton *Button10;
   TGroupBox *GroupBox10;
   TGroupBox *GroupBox11;
   TRadioButton *RadioButton1;
   TRadioButton *RadioButton2;
   TLabel *Label19;
   TEdit *Edit22;
   TLabel *Label25;
   TEdit *Edit23;
   TComboBox *ComboBox2;
   TStringGrid *StringGrid1;
   TLabel *Label26;
   TButton *Button11;
   TButton *Button12;
   TLabel *Label28;
   TLabel *Label30;
   TLabel *Label31;
   TLabel *Label34;
	TEdit *edtPowMeasured2_0;
	TEdit *edtPowMax2_0;
   TLabel *Label38;
   TLabel *Label114;
   TLabel *Label115;
   TLabel *Label116;
	TPanel *manualTransmitterSetupPnl;
   TCheckBox *CheckBox53;
   TCheckBox *CheckBox54;
   TCheckBox *CheckBox55;
   TCheckBox *CheckBox56;
   TButton *Button9;
   TButton *Button13;
   TPanel *Panel13;
   TButton *Button50;
   TLabel *Label121;
   TGroupBox *GroupBox12;
   TGroupBox *GroupBox13;
   TRadioButton *RadioButton3;
   TRadioButton *RadioButton4;
   TLabel *Label122;
   TLabel *Label123;
   TLabel *Label125;
   TLabel *Label126;
   TEdit *Edit28;
   TEdit *Edit29;
   TComboBox *ComboBox5;
   TCSpinEdit *CSpinEdit3;
   TButton *Button51;
   TButton *Button52;
   TCSpinEdit *CSpinEdit4;
   TGroupBox *GroupBox14;
   TLabel *Label127;
   TLabel *Label128;
   TGroupBox *GroupBox15;
   TLabel *Label129;
   TButton *Button53;
   TButton *Button54;
   TLabel *Label130;
   TLabel *Label131;
   TCSpinEdit *CSpinEdit5;
   TCSpinEdit *CSpinEdit6;
   TEdit *Edit30;
   TEdit *Edit31;
   TEdit *Edit32;
   TButton *Button55;
   TButton *Button56;
   TButton *Button58;
   TChart *Chart5;
   TLabel *Label132;
   TLabel *Label133;
   TLabel *Label134;
   TLabel *Label135;
   TLineSeries *LineSeries12;
   TLabel *Label136;
   TLabel *Label137;
   TLabel *Label138;
	TEdit *edtPowMeasured53_0;
	TEdit *edtPowMax53_0;
	TEdit *edtPositionMax53_0;
   TLabel *Label139;
   TPanel *Panel14;
   TLabel *Label140;
   TButton *Button59;
   TGroupBox *GroupBox16;
   TGroupBox *GroupBox17;
   TRadioButton *RadioButton5;
   TRadioButton *RadioButton6;
   TLabel *Label141;
   TLabel *Label142;
   TLabel *Label144;
   TButton *Button60;
   TButton *Button61;
   TEdit *Edit37;
   TEdit *Edit38;
   TComboBox *ComboBox6;
   TStringGrid *StringGrid4;
   TLabel *Label149;
   TLabel *Label150;
   TCheckBox *CheckBox57;
   TCheckBox *CheckBox58;
   TCheckBox *CheckBox59;
   TCheckBox *CheckBox60;
   TCheckBox *CheckBox61;
   TCheckBox *CheckBox62;
   TCheckBox *CheckBox63;
   TCheckBox *CheckBox64;
   TLabel *Label155;
   TLabel *Label156;
   TLabel *Label157;
   TMenuItem *N19;
   TComboBox *ComboBox7;
   TRadioGroup *RadioGroup5;
   TLabel *Label158;
   TGroupBox *GroupBox19;
   TLabel *Label168;
   TEdit *Edit41;
   TRadioGroup *RadioGroup6;
   TComboBox *ComboBox8;
   TGroupBox *GroupBox20;
   TLabel *Label171;
   TEdit *Edit43;
   TPanel *Panel26;
   TLabel *zLabel146;
   TGroupBox *zGroupBox42;
   TLabel *zLabel149;
   TLabel *zLabel151;
   TLabel *zLabel152;
   TLabel *zLabel153;
   TLabel *zLabel154;
   TCSpinEdit *zCSpinEdit23;
   TButton *zButton138;
   TButton *zButton139;
   TCSpinEdit *zCSpinEdit24;
   TChart *zChart11;
   TPointSeries *LineSeries14;
   TLineSeries *LineSeries15;
   TButton *zButton140;
   TButton *zButton141;
   TButton *zButton142;
   TGroupBox *zGroupBox43;
   TLabel *zLabel147;
   TLabel *zLabel148;
   TLabel *zLabel155;
   TLabel *zLabel156;
   TLabel *zLabel157;
   TLabel *zLabel158;
   TLabel *elLabel131;
   TEdit *zEdit50;
   TEdit *zEdit51;
   TButton *zButton134;
   TBitBtn *HaltPos;
   TStringGrid *zStringGrid6;
   TEdit *zEdit57;
   TCSpinEdit *elCSpinEdit21;
   TStaticText *StaticText2;
   TStaticText *StaticText3;
   TStaticText *StaticText4;
   TStaticText *StaticText5;
   TStaticText *StaticText6;
   TStaticText *StaticText7;
   TRadioGroup *RadioGroup11;
   TLabel *Label124;
   TStaticText *StaticText8;
   TLabel *Label143;
   TStaticText *StaticText9;
   TSpeedButton *SpeedButton10;
   TLabel *Label27;
   TStaticText *StaticText10;
   TStaticText *StaticText11;
   TStaticText *StaticText12;
   TRadioGroup *RadioGroup12;
   TSpeedButton *SpeedButton11;
   TButton *Button64;
   TButton *Button57;
   TMenuItem *N20;
   TPanel *PanelTimer;
   TRzLEDDisplay *RzLEDDisplay1;
   TTimer *Timer2;
   TGroupBox *GroupBox18;
   TGroupBox *GroupBox21;
   TLabel *Label16;
   TMenuItem *N21;
   TPanel *Panel_PKC_PKU;
   TStringGrid *StringGrid5;
   TCheckBox *CheckBox65;
   TCheckBox *CheckBox66;
   TCheckBox *CheckBox67;
   TCheckBox *CheckBox68;
   TCheckBox *CheckBox69;
   TCheckBox *CheckBox70;
   TCheckBox *CheckBox71;
   TCheckBox *CheckBox72;
   TButton *Button62;
   TLabel *Label117;
   TButton *Button63;
   TButton *Button65;
   TEdit *Edit24;
   TLabel *Label118;
   TButton *Button66;
   TMenuItem *N41;
   TPanel *Panel15;
   TButton *Button67;
   TButton *Button68;
   TButton *Button69;
   TGroupBox *GroupBox22;
   TButton *Button71;
   TStaticText *StaticText13;
   TGroupBox *GroupBox23;
   TLabel *Label146;
   TStaticText *StaticText15;
   TLabel *Label147;
   TGroupBox *GroupBox24;
   TEdit *Edit40;
   TLabel *Label148;
   TMenuItem *N23;
   TButton *Button70;
   TMenuItem *N24;
   TCSpinEdit *CSpinEdit2;
   TEdit *Edit39;
   TLabel *Label151;
   TLabel *Label119;
   TStaticText *StaticText16;
   TCheckBox *CheckBox73;
   TCheckBox *CheckBox74;
   TLabel *Label120;
   TCheckBox *CheckBox75;
   TCheckBox *CheckBox76;
   TCheckBox *CheckBox77;
   TCheckBox *CheckBox78;
	TPanel *Panel18;
	TLabel *Label195;
	TGroupBox *GroupBox29;
	TLabel *Label196;
	TLabel *Label197;
	TLabel *Label198;
	TCSpinEdit *CSpinEdit13;
	TEdit *Edit36;
	TComboBox *ComboBox18;
	TCSpinEdit *CSpinEdit14;
	TComboBox *ComboBox19;
	TComboBox *ComboBox20;
	TGroupBox *GroupBox30;
	TLabel *Label199;
	TLabel *Label200;
	TLabel *Label201;
	TComboBox *ComboBox21;
	TCSpinEdit *CSpinEdit15;
	TComboBox *ComboBox22;
	TComboBox *ComboBox23;
	TCSpinEdit *CSpinEdit16;
	TEdit *Edit42;
	TButton *Button86;
	TButton *Button87;
	TButton *Button88;
	TMenuItem *N25;
	TCheckBox *chkMod;
	TTimer *tmr1;
	TGroupBox *grpGrp1;
	TEdit *edtEdt1;
	TEdit *edtEdt2;
        TEdit *edtSerialNumber;
	TEdit *edtPowMeasured2_1;
	TEdit *edtPowMeasured2_2;
	TEdit *edtPowMeasured2_3;
	TEdit *edtPowMax2_1;
	TEdit *edtPowMax2_2;
	TEdit *edtPowMax2_3;
	TEdit *edtPositionMax2_1;
	TEdit *edtPositionMax2_2;
	TEdit *edtPositionMax2_3;
	TLabel *lblBean0;
	TLabel *lblBeam1;
	TLabel *lblBeam2;
	TLabel *lblBeam3;
	TEdit *edtPowMeasured53_1;
	TEdit *edtPowMeasured53_2;
	TEdit *edtPowMeasured53_3;
	TEdit *edtPowMeasured53_4;
	TEdit *edtPowMeasured53_5;
	TEdit *edtPowMeasured53_6;
	TEdit *edtPowMeasured53_7;
	TEdit *edtPowMax53_1;
	TEdit *edtPowMax53_2;
	TEdit *edtPowMax53_3;
	TEdit *edtPowMax53_4;
	TEdit *edtPowMax53_5;
	TEdit *edtPowMax53_6;
	TEdit *edtPowMax53_7;
	TEdit *edtPositionMax53_1;
	TEdit *edtPositionMax53_2;
	TEdit *edtPositionMax53_3;
	TEdit *edtPositionMax53_4;
	TEdit *edtPositionMax53_5;
	TEdit *edtPositionMax53_6;
	TEdit *edtPositionMax53_7;
	TLabel *lbl53_1;
	TLabel *lbl53_2;
	TLabel *lbl53_3;
	TLabel *lbl53_4;
	TLabel *lbl53_5;
	TLabel *lbl53_6;
	TLabel *lbl53_7;
	TLabel *lbl53_8;
	TEdit *edtPositionMax2_0;
	TLineSeries *PointSeries3;
	TLineSeries *Series3;
	TLineSeries *Series4;
	TLineSeries *Series6;
	TPointSeries *LineSeries16;
	TLineSeries *PointSeries4;
	TLineSeries *Series7;
	TLineSeries *Series8;
	TLineSeries *Series9;
	TLineSeries *Series10;
	TLineSeries *Series11;
	TLineSeries *Series12;
	TLineSeries *Series13;
	TEdit *edtBMK2_1;
	TEdit *edtBMK2_2;
	TEdit *edtBMK2_3;
	TEdit *edtBMK2_4;
	TLabel *Label145;
	TButton *btn1;
	TLabel *Label152;
	TLabel *Label153;
	TEdit *edtBMK53_1;
	TEdit *edtBMK53_2;
	TEdit *edtBMK53_3;
	TEdit *edtBMK53_4;
	TEdit *edtBMK53_5;
	TEdit *edtBMK53_6;
	TEdit *edtBMK53_7;
	TEdit *edtBMK53_8;
	TButton *Button72;
	TSaveDialog *SaveDialog1;
        TBitBtn *BitBtn1;
        TBitBtn *BitBtn2;
	TBitBtn *btn2;
	TButton *Button73;
	TEdit *timeEdt;
	TButton *btn3;
	TButton *btn4;
    TEdit *edtTemperatureDisplay2pps;
    TEdit *edtTemperatureDisplay2zps;
    TLabel *lbl1;
    TLabel *lbl2;
	TEdit *edtTemperatureDisplay53pps;
	TEdit *edtTemperatureDisplay53zps;
    TLabel *lbl11;
    TLabel *lbl21;
	TPanel *Panel12;
	TLabel *lblDevice;
	TPageControl *pgcDevice;
	TTabSheet *tsDeviceConnect;
	TTabSheet *tsSearchDevice;
	TListBox *lstDevice;
	TButton *btnSeatchDevice;
	TButton *btnConnectDevice;
	TRadioGroup *rgPowerMetr;
	TRadioGroup *rgGen;
	TEdit *edtLanPowerMetr;
	TEdit *edtGpibPowerMetr;
	TEdit *edtLanGen;
	TEdit *edtGpibGen;
	TButton *btn5;
	TPanel *pnl1;
	TPanel *pnl2;
	TRadioGroup *RadioGroup13;
	TEdit *edtGpibGen2;
	TEdit *edtLanGen2;
	TPanel *pnl3;
	TEdit *edtGpibDC1;
	TEdit *edtLanDC1;
	TPanel *pnl4;
	TRadioGroup *rg1;
	TRadioGroup *rg2;
	TEdit *edtLanDC2;
	TEdit *edtGpibDC2;
	TPanel *pnl5;
	TRadioGroup *rg3;
	TEdit *edtLanDC3;
	TEdit *edtGpibDC3;
	TPanel *pnl6;
	TTabSheet *tsSettings;
        void __fastcall onMenuCalibr(TObject *Sender);


        void __fastcall EstimErr(TObject *Sender);


  void __fastcall onCalibrate(TObject *Sender);
  void __fastcall onStopCalibrate(TObject *Sender);
  void __fastcall onSaveCalibrate(TObject *Sender);
  void __fastcall onOutCalibrate(TObject *Sender);
  void __fastcall CalibratePm(TObject *Sender);
  void __fastcall PotentionMeash(TObject *Sender);
  void __fastcall ChengeLiter(TObject *Sender);
  void __fastcall CalbOutChan(TObject *Sender);
  void __fastcall B2_puskClick(TObject *Sender);
  void __fastcall B2_stopClick(TObject *Sender);
  void __fastcall B53_puskClick(TObject *Sender);
  void __fastcall B53_stopClick(TObject *Sender);
  void __fastcall Bt_ZClick(TObject *Sender);
  void __fastcall ChengeDistCalb(TObject *Sender);
// void __fastcall startThroughLuch(TObject *Sender);
  void __fastcall UD2_fClick(TObject *Sender, TUDBtnType Button);
  void __fastcall UD53_fClick(TObject *Sender, TUDBtnType Button);
  void __fastcall Poten(TObject *Sender);
  void __fastcall savePotential(TObject *Sender);
  void __fastcall ReadPotential(TObject *Sender);
  void __fastcall onClosePoten(TObject *Sender);
//  void __fastcall PotenStop(TObject *Sender);
  void __fastcall PKC_52TrRt(TObject *Sender);
  void __fastcall startPKC(TObject *Sender);
  void __fastcall StopPKC(TObject *Sender);
  void __fastcall ClosePKC(TObject *Sender);
  void __fastcall TimerOff(TObject *Sender);
  void __fastcall ResetUPPU(TObject *Sender);
  void __fastcall ResetUPS(TObject *Sender);
  void __fastcall B_cht_2Click(TObject *Sender);
  void __fastcall Button22Click(TObject *Sender);
  void __fastcall B2_avtClick(TObject *Sender);
  void __fastcall B2_tablClick(TObject *Sender);
  void __fastcall B2_vyhClick(TObject *Sender);
  void __fastcall B2_stClick(TObject *Sender);
  void __fastcall B_22_zapClick(TObject *Sender);
  void __fastcall B2_mrtClick(TObject *Sender);
  void __fastcall B2_chtenClick(TObject *Sender);
  void __fastcall MeashOutPow(TObject *Sender);
  void __fastcall ChngLt(TObject *Sender);
  void __fastcall CloseOutPow(TObject *Sender);
  void __fastcall StartMeshPow(TObject *Sender);
  void __fastcall StopMshPow(TObject *Sender);
  void __fastcall ReadFliIn(TObject *Sender);
  void __fastcall SB4Click(TObject *Sender);
        void __fastcall B25Click(TObject *Sender);
        void __fastcall SB_5Click(TObject *Sender);
        void __fastcall SB_fiClick(TObject *Sender);
void __fastcall EstimBMKCab(TObject *Sender);
  void __fastcall B_fiClick(TObject *Sender);
  void __fastcall SB_fzClick(TObject *Sender);
//  void __fastcall Shtat(TObject *Sender);
  void __fastcall B_16Click(TObject *Sender);
  void __fastcall Button16Click(TObject *Sender);
  void __fastcall Button25Click(TObject *Sender);
  void __fastcall B26_cmpClick(TObject *Sender);
  void __fastcall CalbOutChan53(TObject *Sender);
  void __fastcall Write_MRT(TObject *Sender);
  void __fastcall B26_closeClick(TObject *Sender);
  void __fastcall B53_avtClick(TObject *Sender);
  void __fastcall B53_tablClick(TObject *Sender);
  void __fastcall B53_stClick(TObject *Sender);
  void __fastcall B53_vyhClick(TObject *Sender);
  void __fastcall SpeedButton4Click(TObject *Sender);
  void __fastcall B53_fiClick(TObject *Sender);
  void __fastcall SpeedButton5Click(TObject *Sender);
  void __fastcall B53_mrtClick(TObject *Sender);
  void __fastcall SpeedButton6Click(TObject *Sender);
  void __fastcall Button26Click(TObject *Sender);
  void __fastcall SpeedButton7Click(TObject *Sender);
  void __fastcall Button27Click(TObject *Sender);
  void __fastcall Button28Click(TObject *Sender);
  void __fastcall Button29Click(TObject *Sender);
  void __fastcall ChnLitera(TObject *Sender);
  void __fastcall ManualCallbr(TObject *Sender);
  void __fastcall StopManualCall(TObject *Sender);
  void __fastcall AdjastPKS(TObject *Sender);
  void __fastcall Button30Click(TObject *Sender);
  void __fastcall Button33Click(TObject *Sender);
  void __fastcall Button31Click(TObject *Sender);
  void __fastcall Button32Click(TObject *Sender);
  void __fastcall Button34Click(TObject *Sender);
  void __fastcall Button35Click(TObject *Sender);
  void __fastcall Button36Click(TObject *Sender);
  void __fastcall Button37Click(TObject *Sender);
  void __fastcall Button40Click(TObject *Sender);
  void __fastcall Button38Click(TObject *Sender);
  void __fastcall Button39Click(TObject *Sender);
  void __fastcall Button41Click(TObject *Sender);
  void __fastcall Button42Click(TObject *Sender);
  void __fastcall Button43Click(TObject *Sender);
  void __fastcall Button44Click(TObject *Sender);
  void __fastcall Button47Click(TObject *Sender);
  void __fastcall Button46Click(TObject *Sender);
  void __fastcall Button45Click(TObject *Sender);
  void __fastcall Button48Click(TObject *Sender);
  void __fastcall Button49Click(TObject *Sender);
  void __fastcall CreatScrn(TObject *Sender);
   void __fastcall ChengeModPot(TObject *Sender);
   void __fastcall FormClose(TObject *Sender, TCloseAction &Action);
   void __fastcall ClearGrid4(TObject *Sender);
   void __fastcall N9Click(TObject *Sender);
   void __fastcall Button6Click(TObject *Sender);
   void __fastcall Button129Click(TObject *Sender);
   void __fastcall Button7Click(TObject *Sender);
   void __fastcall Button136Click(TObject *Sender);
   void __fastcall Button130Click(TObject *Sender);
   void __fastcall N11Click(TObject *Sender);
   void __fastcall Button9Click(TObject *Sender);
   void __fastcall Button132Click(TObject *Sender);
   void __fastcall Button137Click(TObject *Sender);
   void __fastcall CSpinEdit26Change(TObject *Sender);
   void __fastcall Button117Click(TObject *Sender);
   void __fastcall Button119Click(TObject *Sender);
   void __fastcall Button120Click(TObject *Sender);
   void __fastcall Button121Click(TObject *Sender);
   void __fastcall N13Click(TObject *Sender);
   void __fastcall Button10Click(TObject *Sender);
   void __fastcall Button11Click(TObject *Sender);
   void __fastcall Button12Click(TObject *Sender);
   void __fastcall Button13Click(TObject *Sender);
   void __fastcall N14Click(TObject *Sender);
   void __fastcall Button50Click(TObject *Sender);
   void __fastcall CSpinEdit4Change(TObject *Sender);
	void __fastcall Button52Click(TObject *Sender);
   void __fastcall Button55Click(TObject *Sender);
   void __fastcall Button56Click(TObject *Sender);
   void __fastcall Button58Click(TObject *Sender);
	void __fastcall Button51Click(TObject *Sender);
   void __fastcall Button54Click(TObject *Sender);
   void __fastcall Button53Click(TObject *Sender);
   void __fastcall N18Click(TObject *Sender);
   void __fastcall Button59Click(TObject *Sender);
   void __fastcall Button61Click(TObject *Sender);
   void __fastcall Button60Click(TObject *Sender);
   void __fastcall N19Click(TObject *Sender);
   void __fastcall zButton134Click(TObject *Sender);
   void __fastcall HaltPosClick(TObject *Sender);
   void __fastcall zButton138Click(TObject *Sender);
   void __fastcall zButton139Click(TObject *Sender);
   void __fastcall zButton142Click(TObject *Sender);
   void __fastcall zButton140Click(TObject *Sender);
   void __fastcall Calibr_BMK(TObject *Sender);
  // void __fastcall CloseBMKCalbr(TObject *Sender);
  void __fastcall ClosePanel15(TObject *Sender);
   void __fastcall ClosePanel26(TObject *Sender);
   void __fastcall ChenFr23(TObject *Sender);
   void __fastcall ChengMode(TObject *Sender);
   void __fastcall LoadFlBMK_53(TObject *Sender);
   void __fastcall LoadFlBMK_2(TObject *Sender);
   void __fastcall Button64Click(TObject *Sender);
   void __fastcall ChengMode2(TObject *Sender);
  //	void __fastcall InitStrGrd1(TObject *Sender);
   void __fastcall TimerDelayOn(TObject *Sender);
   void __fastcall onTimer2(TObject *Sender);
   void __fastcall ChekPKC_PKU(TObject *Sender);
   void __fastcall Beg_PKC_PKU(TObject *Sender);
   void __fastcall StopPKC_PKU(TObject *Sender);
   void __fastcall PZU_WRP(TObject *Sender);
   void __fastcall N41Click(TObject *Sender);
   void __fastcall ChekAtten(TObject *Sender);
   void __fastcall ClosePKU_PKC(TObject *Sender);
   void __fastcall StartCheckComparVch(TObject *Sender);
   void __fastcall StopPKU_PKC(TObject *Sender);
   void __fastcall CheckCompKC(TObject *Sender);
   void __fastcall Go_Stat_Mode(TObject *Sender);
   void __fastcall Fit_Att_Comp(TObject *Sender);
   void __fastcall onChenSpEd2(TObject *Sender);
   void __fastcall ChengeCheckBox75(TObject *Sender);
	void __fastcall Button86Click(TObject *Sender);
	void __fastcall N25Click(TObject *Sender);
	void __fastcall Button88Click(TObject *Sender);
	void __fastcall Button72Click(TObject *Sender);
        void __fastcall BitBtn1Click(TObject *Sender);
        void __fastcall BitBtn2Click(TObject *Sender);
	void __fastcall btn2Click(TObject *Sender);
	void __fastcall btn1Click(TObject *Sender);
	void __fastcall edtSerialNumberKeyPress(TObject *Sender, char &Key);
	void __fastcall edtSerialNumberExit(TObject *Sender);
	void __fastcall Button73Click(TObject *Sender);
	void __fastcall FormActivate(TObject *Sender);
	void __fastcall btn3Click(TObject *Sender);
	void __fastcall btn4Click(TObject *Sender);
	void __fastcall btnSeatchDeviceClick(TObject *Sender);
	void __fastcall lstDeviceClick(TObject *Sender);
	void __fastcall btn5Click(TObject *Sender);
	void __fastcall btnConnectDeviceClick(TObject *Sender);
	void __fastcall ComboBox2Click(TObject *Sender);
 
 //  void __fastcall GroupBox10Click(TObject *Sender);

private:// User declarations
  bool __fastcall SmsdWrCmd(char *cmd); // для электропривода
   bool __fastcall SmsdWrCmdList(char **cmd_list, BYTE len);
  // bool __fastcall SmsdRdCmd(void);
   bool __fastcall SmsdWrCmd_start(char *cmd); // для электропривода
   int __fastcall GetFreqIndex(double in_freq);
   bool __fastcall SearchZero(unsigned Speed,bool rev);
   bool __fastcall MeasByStep(unsigned StepsCount);
   bool __fastcall WrCmdsAndMove(DWORD Mv, bool revers);
   bool __fastcall WrCmdsAndMove_speed(DWORD Mv, bool revers, char **velocity);
   void __fastcall MsgInf(AnsiString msg);
   bool __fastcall MsgErr(AnsiString err_msg);
   bool __fastcall MsgErrCon(AnsiString err_msg);
 //  void __fastcall SetDlgInitialDir(AnsiString initial_dir);
   void __fastcall BuildCalibrGraph_bmk(int index);
   void __fastcall InitGrid_prd(void);
   void __fastcall prd_2_bmk(void);
   void __fastcall prd_2_bmk_prov(void);
   void __fastcall parking(void);
   void __fastcall Search_Zero_my(bool rev);
   void __fastcall prd_2_bmk_poz(void);
   void __fastcall prd_53_bmk(void);
   void __fastcall prd_53_bmk_poz(void);
	void __fastcall prd_53_bmk_prov(void);
//	void dimensionOfLetter53();
void __fastcall GoPosStan(int go_pos,int beg_sec,int end_sec,bool rev);
 bool ReadFileCabBMK (AnsiString MyFileName,int ind);
 void __fastcall SetZero(void);
 void GoBegAction(int lit,int post);
 unsigned int GetTemper(int mod,int n_post,int lit);
 bool Res_UPPU(void);
bool SetOutAtt(int lit,int post,int nl,int freq_index) ;
bool CheckedLuch_53(int l);
void ClearStrGrd5(void);
bool WorkAtt(void);
void turnOnAmplifielrs( int n_post, int indLit);
void readValueForTurnOnAmpl(int indLit, int& indIn, int& indOut, int& Freq, AnsiString& SPg, int& nl);
void turnOnAllAmplifielrs();
void __fastcall TimerInCurrentConsumption();
 public:// User declarations
		  __fastcall TForm1(TComponent* Owner);
 CFtDevice  *PL_1;
  CFtDevice  *PL_2;

 ViSession rm , viG, viP, viA;
 ViStatus status;

 AnsiString TCPG;
 AnsiString TCPP;
 AnsiString TCPA;

 bool PStop;
 bool CStop;
 bool TimeOff;
 bool dl;
 int Mode;     //1- предача , 0- прием
 bool ClbPwm;
 bool ChkDevs ;
 bool PowOnOff;

 TFileStream* Myfile;

struct MeasDevs{ int distn;
                 AnsiString TCP;
                 ViSession Vi;
                 }MDvs;

vector < MeasDevs > Devs;
vector <float> Pwr;
vector <float> RdIn;            //мощность со всех выходов заданной полусферы, заданной литеры по всем частотам на данном входе
vector <float> dPg;                  // затухание кабеля генератора
vector <float> dPm;               // затухание измерителя мощности
vector<float>Dbl;

vector <float> dPg_sign;                  // затухание кабеля генератора
vector <float> dPm_vch;               // затухание измерителя мощности
vector <double> PM_clb;

struct PowOutADC{ float Pw;
               int Kode_ADC;
             } PowADC;

  vector< struct PowOutADC> OUTiIn;
 vector <bool> UsPerFrq ;  //коды АЦП повсем выходам , на каждой частоте на каждом луче по порядку
bool PaketP_RDF(U32 addr_rd,U32 data_rd[]);
struct Poteni{ int in;
              vector<float> PtIn ;     //  потенциал по всем лучам на каждой частоте  для входа in
              vector<float> SumPw;     // суммарная мощность по всем лучам
             }Ptl;
vector< struct Poteni > Potential;          //Для  входа i
  float **deltaPower;
Byte Att_OUTi[8][13][160];    //max количество лучей, выходов,частотных точек у литер
Byte Att_Ini[8][160];
void __fastcall SaveTable(int litera);
 bool __fastcall CheckedFlags(AnsiString NameCheckFlag);
bool FindDevises(void) ;
bool IdtfDev(AnsiString S,AnsiString STCP, ViSession vi);
void CheckCalbPm(void);
bool ChekDev(void);
void InitPowMtr(void);
bool InitE825(AnsiString SPg="-135");
bool WrGenE825(AnsiString St);
bool WrGenE825(AnsiString St,AnsiString SPg) ;
bool OfGenE825(void);
bool Init1911A(AnsiString UnP);
float StepRdPow(void);
float ConvStr(AnsiString S);
void OutChart(int f,float P);
void CorrStrGen(AnsiString &Str);
void OutChart1(int F,float P);
void OutChart3(int F,float P);
void CalPm(void);
void ShowPanel3(void);
void TrRateStep(void);    //  Однократно Fit.cpp
void ShowPanel4(void);
void ShowPanel5(void);
void TrRateCycl(void);
void Calibrate(void);
void Check(void);
void TranslateRateStp(void);
void TranslateRateCycl(void);
bool FileCalbGnPm(void);
void OutChart4(int F,float P);
void InitLiter(void);
void Calib2OutChn(void);
void Calib53OutChn(void);
void Avt2OutChn(void);
void Avt53OutChn(void);
void B2_chten_um(void);
void InitModClb(void);
void Estim(void);
//void WrFileOUTi(AnsiString MyFileName, vector<float> Ls,int colLuch);
void WrFileOUTiIn(AnsiString FileNam, int colLuch);
//void ReadOUT(AnsiString MyFileName,int colLuch);
void RdFileOUTiIn(AnsiString MyFileName, int colLuch);
double __fastcall GetAngleAlph(int begin_sec,int end_sec,int now_deg,int go_deg);
double __fastcall ResAlph(int begin_sec,int end_sec,int bet);
void CloseTabPt(void);
void OutTabPot(int colLuch,int colF,int colOut,int Flb);
void RdOutTabPot(int colLuch,int colF,int colOut,int Flb);
void ClearStrGrd(void);
void ClearStrGrd1(void) ;
void ClearStrGrdPow(void);
void InitLt(void);
bool PaketUP7_1( Byte ADR_UP7,Byte DATA[],U32 data_wr);
bool PaketUP7_2( Byte ADR_UP7,Byte DATA[]);
bool PaketUP7_3( Byte ADR_UP7,Byte DATA[]);
bool PaketUP7_4(Byte ADR_UP7,Byte DATA_UP7[]);
bool SetOUT_EUS_ex(int indLit,int indPSph, int indOut);
void SetTime();
void SetDate();
void WriteEdit(AnsiString, int, AnsiString);
void setValueEdit(AnsiString compt, String str);
AnsiString getValueEdit(AnsiString compt);
bool __fastcall SaveBeamMax(AnsiString nameHemisphere, int NumberStartEdit);
void __fastcall getNameFileMaxPosition(AnsiString nameRadioButtonHemisphere);
bool PaketFOC(int indIn,int NP,unsigned get,unsigned sint,unsigned NL );
bool PaketFUP(Byte* bytes,Byte& retdan);
bool PaketP_WRD(Byte data,Byte DST) ;
bool CheckKRDY(Byte KRDY);
Byte ShiftOutPKC(int indInFOC,int OutPKS,Byte Attn=0);
void InAtt(Byte indIn,Byte ValAtt) ;
void InAttOff(void) ;
void EUSOff(void);
void ThroughPKC(void);
void Att(int indInFOC);
void OutAttOnOff(Byte On_Off);
void AttCB_53Off(void);
bool PaketFUK(Byte* DATA);
bool Att_Luch_Out(int indIn,int indOut,int indLit,int indPSph,int luch,Byte ValInAtt,Byte ValOutAtt);
bool Att_Luch_Out1(int indIn,int indOut,int indLit,int indPSph,int luch,Byte ValInAtt,Byte ValOutAtt);
bool Vkl_IP(Byte ONV,Byte ONV2_0,Byte ONV2_1 ,Byte ONV3_0,Byte ONV3_1);
bool PaketFKU(Byte* DanFKU,Byte initIPK) ;
bool TimeOffErr(int com_dan);
bool PaketFZD(Byte ZFTS_ZFKU,Byte* AskDan)  ;
bool PaketFTS(Byte* DanFTS);
//bool PowOn(void);
bool Packet_P_CO(void) ;
bool PaketAnsw(Byte IPS_Answ);
void InitLt1(void);
//void ResetDev(void);
void Calib2kabl(void);
void InitGrid_klb(void);
void OutGrid_klb(void);
void clearChartSettingBmk(int);
void InitStrGrd1(void);
void save_ibst();
void dwnibst();
void ShowTemperatureEletric();
int __fastcall currentTemperature(int n_post);
int Vkl_us_vip(int,int);  /* включение канала усилителя, включение источника питания УП7 */
int Vkl_nk_att(int,unsigned,unsigned,unsigned,unsigned,unsigned); /* вкл. ном. вых. матр. ПМ для 1-ого и 2-ого канала, задание кода входных атт для 1-ого и 2-ого канала */
int Vkl_att(int n_post,unsigned *kod_att);/* задание кода выходных атт */
int Vkl_us_vip_t(int,int);  /* включение канала усилителя, включение источника питания УП7 */
int Vkl_nk_att_t(int,unsigned,unsigned,unsigned,unsigned,unsigned); /* вкл. ном. вых. матр. ПМ для 1-ого и 2-ого канала, задание кода входных атт для 1-ого и 2-ого канала */
int Vkl_att_t(int n_post,unsigned *kod_att);/* задание кода выходных атт */
int zap_dann(unsigned,unsigned,unsigned,unsigned);/* запись во FLASH*/
//int Vkl_IP(int);
int Vykl_us_vip(int n_post);  /* выключение канала усилителя, выключение источника питания УП7 */
int Vykl_nk_att(int n_post,unsigned n_vh1,unsigned n_vh2,unsigned in1_at,unsigned in2_at,unsigned nk_svch);
int Vykl_us_vip_t(int n_post);  /* выключение канала усилителя, выключение источника питания УП7 */
int Vykl_nk_att_t(int n_post,unsigned n_vh1,unsigned n_vh2,unsigned in1_at,unsigned in2_at,unsigned nk_svch);
int zapr_dan_up7(int n_post,int nf);   /*0-- нет ошибок, 1-- есть ошибки */
int zapr_dan_up7_t(int n_post,int nf);   /*0-- нет ошибок, 1-- есть ошибки */
int Vkl_nk_att_t_pks(int n_post,unsigned n_vh1,unsigned n_vh2,unsigned in1_at,unsigned in2_at,unsigned nk_svch);
void Tabl2OutChn(void); /*таблица значений */
void Tabl53OutChn(void);
void tabl_visble(void);
void tabl53_visble(void);
void tabl53_visble_chten(void);
int otvet_paket(void); /* 0-- нет ошибок; 1-- есть ошибка (ERR=1); 2-- нет ответных пакетов*/
int otvet_paket_zap(void);
int otvet_paket_FKU(void);
int paket_FUP_my(void);
int paket_FUP_my_vkl(void);
void PKU_ru(void);
int Results_zap(char* ErrorMsg);
int chten_mrt(int n_vhod,int ps,int lit);/* чтение из текстового файла МРТ */
void zapis_tabl_my(int nus);
void zapis_tabl53_my(int nus);
void Calib53_ACHX(void);
void ACHX53_rucn(void);
void ACHX53_izm(void);
void ACHX53_tabl(void);
void PKU_avt(void);
int shtat_rejim(void);
int ResetUPPU_pks(void);
void Calib52_ACHX(void);
void ACHX52_izm(void);
void ACHX52_rucn(void);
void ACHX52_tabl(void);
void BeginMeashPw(void);
void GetOutAtt(int lit);
int GetADC(int indLit, int indPSph, int indOut);
Byte GetAdrUp7Post(int indLit,int indPSph) ;
bool SetOUT_EUS(int indLit,int indPSph, int indOut);
float RatePoten(int k,int Flb,int& Lit,int& luch);
void OutTabFls(int NOut);
void AnADC(int ind);
bool ShowErr(AnsiString St);
void MyTimer(int tm);
void ReadFileCalb(AnsiString MyFileName);
void StartTrack(void);
void OutChart5(int pos,float P);
void OutContrFUP(Byte mod,Byte Att,Byte KF);
void ProcessPKC(Byte& indIn,Byte& indOut,int Nout);
void CycleOut(Byte& indIn);
bool CheckedLuch(unsigned l) ;
float CorrectionOfBeam(double f,int& luch,int& Lit);
int comm_vhod(int n_vhod);
int comm_vyhod(int n_vyhod);
int USBCleanup(char* ErrorMsg);
void clearEditSettingBmk(int lit);
bool openMaxPosition(AnsiString, int,bool);
void SaveMeashDevises(void);
void ReadMeashDevises(void);
void ShowPanel(TPanel *Panel);
void InitStrGrd4(void);
void WrFileBMKPt(AnsiString FlNam,int Lit);
bool CheckedLuch_2(int l);
double RateAntenn53(int indf,int gr);
void WorkPKC_PKU(int indIn,int indOut,int col);
void  ThroughPKC_PKU(void);
bool  RdFile_PZU(char* namefile, u8 *buf,  int buf_sz);
bool PaketP_WRP(u8* buf_dan,Byte DST,Byte sz);
bool ModGenE825(float per, float rang );
bool ModGenE825off(void );
bool WorkCompVch(void);
bool WorkCompKC(void);
bool PaketP_RDA(U32 addr_rd,U32 &data_rd );
bool PaketP_WRA(U32 addr_wr,U32 data_wr );
 void saveFileGainFactor();
void downloadFileGainFactor();
 SmsdCom *sm;
 bool ChekPrib(String, ViSession*);
 bool openDeltaPower(AnsiString patch, int lit, bool hemisphere);
 void deleteDeltaPower(int);
};
//---------------------------------------------------------------------------
extern PACKAGE TForm1 *Form1;
//---------------------------------------------------------------------------
#endif
